# Check for Microsoft.Graph module and install if necessary
if (-not (Get-Module -ListAvailable -Name Microsoft.Graph)) {
    Write-Host "Microsoft.Graph module is not installed. Attempting to install..."
    Install-Module -Name Microsoft.Graph -Scope CurrentUser -Force -SkipPublisherCheck
    Write-Host "Microsoft.Graph module has been installed."
}

if ($env:USERNAME -ne "sa.srvschtasks") {
    $sourceFilePath = "C:\Users\$env:USERNAME\Highlands County Government\Information Technology - Documents\General\Asset Management\License Information\Microsoft Licenses Requested FY 24 8.31.2023.xlsx"
} else {
    $sourceFilePath = "C:\Users\bsommerville\Highlands County Government\Information Technology - Documents\General\Asset Management\License Information\Microsoft Licenses Requested FY 24 8.31.2023.xlsx"
}

$targetFolderPath = "\\hc22itsup\zCache\Service Desk\Tools\LicenseMon\Ref"

# Check if the source file exists
if (Test-Path -Path $sourceFilePath -PathType Leaf) {
    Copy-Item -Path $sourceFilePath -Destination $targetFolderPath -Force
} else {
    Write-Host "Source file not found to source, data will not be current. Contact IT for debugging."
}

python '\\hc22itsup\zCache\Service Desk\Tools\LicenseMon\Scripts\datapull.py'
$currentDate = Get-Date -Format "MMddyy"

# Define the delay time in seconds
$delayInSeconds = 3

# Start the sleep timer
Start-Sleep -Seconds $delayInSeconds

$histPath = $currentDate + "_LicData"

# Define paths for output

$histOutputPath = "\\hc22itsup\zCache\Service Desk\Tools\LicenseMon\LicenseHist\$histPath.csv"
$OutputPath = "\\hc22itsup\zCache\Service Desk\Tools\LicenseMon\Ref\LicData.csv"

# Authentication parameters
$clientId = "00000000000"
$tenantId = "00000000000"
$clientSecret = "00000000000"

# Convert the client secret to a SecureString and create credential object
$ClientSecretPass = ConvertTo-SecureString -String $clientSecret -AsPlainText -Force
$ClientSecretCredential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $clientId, $ClientSecretPass

# Authenticate to Microsoft Graph
Connect-MgGraph -TenantId $tenantId -ClientSecretCredential $ClientSecretCredential -NoWelcome

# Get all users from Microsoft Graph
$graphUsers = Get-MgUser -All | Select-Object UserPrincipalName, DisplayName

# Retrieve all available licenses in the tenant
$allLicenses = Get-MgSubscribedSku

# Initialize results array
$results = @()

$csvPath = "\\hc22itsup\zCache\Service Desk\Tools\LicenseMon\Ref\users.csv"

# Import the CSV file and create the hashtable
$csvData = Import-Csv -Path $csvPath
$upnToOU = @{}
foreach ($row in $csvData) {
    $upnToOU[$row.Email] = $row.Department
}



# Function to check UPN and set OU
Function Set-OU {
    Param (
        [string]$upn
    )
    if ($upnToOU.ContainsKey($upn)) {
        return $upnToOU[$upn]
    } else {
        return $null
    }
}


# List of valid OUs
$validOUs = @('ADM', 'AF', 'BUS', 'CE', 'CI', 'CIA', 'CLK', 'CP', 'CTS', 'DEV', 'HDB', 'HR', 'IT', 'LGL', 'PF', 'PS', 'RB', 'SC', 'SE', 'TC', 'COMM', 'AssignmentNeeded' )

# String to be trimmed from the OU
$trimString = ",OU=HC,DC=HC,DC=LAN"

foreach ($user in $graphUsers) {
    $userUPN = $user.UserPrincipalName
    $userDisplayName = $user.DisplayName

    # Skip if UPN is null or empty
    if ([string]::IsNullOrWhiteSpace($userUPN)) {
        continue
    }

   
    # Fetch user's license information from Microsoft Graph
    $mgUser = Get-MgUser -UserId $userUPN -Select AssignedLicenses -ErrorAction SilentlyContinue

    # Fetch the user's DistinguishedName from Active Directory and extract the OU
    $adUser = Get-ADUser -Filter "UserPrincipalName -eq '$userUPN'" -Property DistinguishedName -ErrorAction SilentlyContinue
   

    if ($adUser.DistinguishedName -ne "null") {
         $ou = if ($adUser) { ($adUser.DistinguishedName -split ',OU=' | Select-Object ) -join ',OU=' -replace '^[^,]+,' }
         $ou = $ou -replace [regex]::Escape($trimString), ''
         $ouComponents = $ou -split ','
          if ($ouComponents.Length -gt 1) {
                $ouComponents = $ouComponents[0..($ouComponents.Length - 2)]
                $ou = $ouComponents -join ','
          }
    }

    #add logic to capture last 3 of OU
    if ($ou.Length -gt 3) {
        $ou = $ou.Substring($ou.Length - 3)
        $ou = $ou.TrimStart("=")
    }

     
    # Example usage of the function
    $userOU = Set-OU -upn $userUPN
    if ($userOU -ne $null) { 
      $ou = $userOU
    }

    #ou polisher
    if ($ou -eq "ect"){
        $ou = "IT"
    }
    if ($ou -eq "est"){
        $ou = "Guest/Default"
    }
    if ($ou -eq "ard"){
        $ou = "Delete"
    }
    if ($ou -eq "PRO"){
        $ou = "ADM"
    }
    if ($ou -eq "unt"){
        $ou = "IT"
    }
    if ($ou -eq "AS"){
        $ou = "TC"
    }
    if ($ou -eq "CS"){
        $ou = "TC"
    }
    
    # Check if the OU is not in the list of valid OUs
    if ($ou -notin $validOUs) {
        $ou = 'AssignmentNeeded'
    }
   
    if ($null -eq $mgUser) {
        continue
    }

    # Map SkuId to SkuPartNumber
    $licenseNames = $mgUser.AssignedLicenses | ForEach-Object {
        $skuId = $_.SkuId
        ($allLicenses | Where-Object { $_.SkuId -eq $skuId }).SkuPartNumber
    }

    # Check if licenses are assigned and add to results if they are
    if ($licenseNames) {
        $licenseList = $licenseNames -join ", "
        $results += [PSCustomObject]@{
            "User" = $userUPN
            "DisplayName" = $userDisplayName
            "Licenses" = $licenseList
            "OU" = $ou
        }
    }
}

# Export the results to CSV files only if there are results
if ($results.Count -gt 0) {
    $results | Export-Csv -Path $OutputPath -NoTypeInformation
    $results | Export-Csv -Path $histOutputPath -NoTypeInformation
}

& "\\hc22itsup\zCache\Service Desk\Tools\LicenseMon\Scripts\FinalDataAgLicMon.ps1"

& "\\hc22itsup\zCache\Service Desk\Tools\LicenseMon\Scripts\histClean.ps1"
